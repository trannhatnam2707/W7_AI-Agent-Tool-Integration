# agent.py
from dotenv import load_dotenv
import google.generativeai as genai
from tools import get_population_by_year, calculate_growth_rate, predict_population
from langchain_google_genai import ChatGoogleGenerativeAI
from state import log_observation, log_decision, log_action, complete_step
import os
import json, re

load_dotenv()

# --- Kh·ªüi t·∫°o Gemini LLM ---
llm = ChatGoogleGenerativeAI(
    model="gemini-1.5-flash",
    google_api_key=os.getenv("GEMINI_API_KEY")
)


# --- Sinh plan t·ª´ LLM ---
def ask_llm_for_plan(user_query: str):
    prompt = f"""
B·∫°n l√† m·ªôt AI Planner. 
Ph√¢n t√≠ch c√¢u h·ªèi ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ m·ªôt k·∫ø ho·∫°ch JSON ƒë·ªÉ th·ª±c hi·ªán.

Y√äU C·∫¶U:
- Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng th√™m gi·∫£i th√≠ch.
- JSON l√† m·ªôt array g·ªìm c√°c b∆∞·ªõc.
- M·ªói b∆∞·ªõc c√≥ "action" v√† tham s·ªë c·∫ßn thi·∫øt.
- M·ªói action c·∫ßn tham s·ªë "country" n·∫øu li√™n quan d√¢n s·ªë.

C√°c action h·ª£p l·ªá:
1. "get_population": l·∫•y d√¢n s·ªë c·ªßa m·ªôt nƒÉm.
   {{ "action": "get_population", "country": "vietnam", "year": 2023 }}
2. "calculate_growth": t√≠nh t·ªâ l·ªá tƒÉng tr∆∞·ªüng.
   {{ "action": "calculate_growth", "start_year": 2023, "end_year": 2025 }}
3. "predict_population": d·ª± ƒëo√°n d√¢n s·ªë.
   {{ "action": "predict_population", "future_year": 2030 }}

C√¢u h·ªèi: "{user_query}"
"""
    response = llm.invoke(prompt)
    return response.content.strip()


# --- Th·ª±c thi plan ---
def execute_plan(plan_json, state):
    print("\nüöÄ B·∫Øt ƒë·∫ßu th·ª±c hi·ªán k·∫ø ho·∫°ch...")
    log_observation(state, f"Nh·∫≠n ƒë∆∞·ª£c plan t·ª´ LLM: {plan_json}")

    # L√†m s·∫°ch JSON (lo·∫°i b·ªè ```json ... ```)
    cleaned = re.sub(r"^```(?:json)?|```$", "", plan_json.strip(), flags=re.IGNORECASE).strip()

    try:
        steps = json.loads(cleaned)
        log_observation(state, f"Parse JSON th√†nh c√¥ng, c√≥ {len(steps)} b∆∞·ªõc")
    except json.JSONDecodeError as e:
        print(f"‚ùå L·ªói parse JSON: {e}")
        return state

    for i, step in enumerate(steps, 1):
        action = step["action"]
        print(f"\nüìç B∆∞·ªõc {i}/{len(steps)}: {action}")

        # === OBSERVE ===
        log_observation(state, f"Quan s√°t step {i}: {step}")

        try:
            if action == "get_population":
                # === DECIDE ===
                country = step.get("country", "vietnam")
                year = step["year"]
                log_decision(state, f"Quy·∫øt ƒë·ªãnh l·∫•y d√¢n s·ªë {country} nƒÉm {year}")

                # === ACT ===
                print(f"   üîç L·∫•y d√¢n s·ªë {country} nƒÉm {year}...")
                population = get_population_by_year(country, year)
                print(f"   ‚úÖ D√¢n s·ªë {country} nƒÉm {year}: {population:,}")

                # C·∫≠p nh·∫≠t state
                if year == state.get("year_start"):
                    state["population_start"] = population
                elif year == state.get("year_end"):
                    state["population_end"] = population

                log_action(state, f"L·∫•y d√¢n s·ªë {year}: {population:,}")
                complete_step(state, i, f"D√¢n s·ªë {year}: {population:,}")

            elif action == "calculate_growth":
                start_pop = state.get("population_start")
                end_pop = state.get("population_end")
                start_year = step["start_year"]
                end_year = step["end_year"]

                if start_pop is None or end_pop is None:
                    print(f"   ‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu d√¢n s·ªë: start={start_pop}, end={end_pop}")
                    continue

                # === DECIDE ===
                log_decision(state, f"T√≠nh growth rate t·ª´ {start_pop:,} ƒë·∫øn {end_pop:,} ({start_year}‚Üí{end_year})")

                # === ACT ===
                years = end_year - start_year
                growth_rate = calculate_growth_rate(start_pop, end_pop, years)
                state["growth_rate"] = growth_rate
                print(f"   ‚úÖ Growth rate: {growth_rate*100:.3f}%/nƒÉm")

                log_action(state, f"T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng: {growth_rate*100:.3f}%/nƒÉm")
                complete_step(state, i, f"T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng: {growth_rate*100:.3f}%/nƒÉm")

            elif action == "predict_population":
                current_pop = state.get("population_end")
                growth_rate = state.get("growth_rate")
                future_year = step["future_year"]
                current_year = state.get("year_end")

                if current_pop is None or growth_rate is None or current_year is None:
                    print(f"   ‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu: pop={current_pop}, rate={growth_rate}, year={current_year}")
                    continue

                # === DECIDE ===
                log_decision(state, f"D·ª± ƒëo√°n d√¢n s·ªë {future_year} t·ª´ {current_pop:,} v·ªõi rate {growth_rate:.5f}")

                # === ACT ===
                years_future = future_year - current_year
                predicted = predict_population(current_pop, growth_rate, years_future)
                state["predicted_population"] = predicted
                state["future_year"] = future_year
                print(f"   ‚úÖ D√¢n s·ªë {future_year}: {predicted:,}")

                log_action(state, f"D·ª± ƒëo√°n d√¢n s·ªë nƒÉm {future_year}: {predicted:,}")
                complete_step(state, i, f"D√¢n s·ªë nƒÉm {future_year}: {predicted:,}")

            else:
                print(f"   ‚ö†Ô∏è Action kh√¥ng h·ªó tr·ª£: {action}")
                log_action(state, f"Action kh√¥ng h·ªó tr·ª£: {action}")
                complete_step(state, i, "failed")

        except Exception as e:
            print(f"   ‚ùå L·ªói t·∫°i b∆∞·ªõc {i}: {e}")
            log_observation(state, f"L·ªói step {i}: {e}")

    print("\n‚úÖ Ho√†n th√†nh th·ª±c hi·ªán k·∫ø ho·∫°ch!")
    return state


# --- T·ªïng h·ª£p: Plan + Execute ---
def plan_and_execute(user_query, state):
    print("\nü§ñ ƒêang t·∫°o k·∫ø ho·∫°ch t·ª´ LLM...")
    plan_json = ask_llm_for_plan(user_query)
    print("üìã Plan LLM sinh ra:")
    print(plan_json)
    print("-" * 50)

    updated_state = execute_plan(plan_json, state)
    return updated_state
